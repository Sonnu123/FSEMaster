#!/usr/bin/env python3

import RPi.GPIO as GPIO
import time

# Use physical pin numbering
GPIO.setmode(GPIO.BOARD)
GPIO.setwarnings(False)

# Define pin numbers using physical pins
TRIG_PIN = 11       # Physical Pin 11 (GPIO17)
ECHO_PIN = 12       # Physical Pin 12 (GPIO18)
BUZZER_PIN = 13     # Physical Pin 13 (GPIO27)

def setup():
    # Set up GPIO pins
    GPIO.setup(TRIG_PIN, GPIO.OUT)
    GPIO.setup(ECHO_PIN, GPIO.IN)
    GPIO.setup(BUZZER_PIN, GPIO.OUT)
    GPIO.output(BUZZER_PIN, GPIO.LOW)  # Ensure buzzer is off initially

def distance():
    # Send a 10us pulse to TRIG
    GPIO.output(TRIG_PIN, GPIO.LOW)
    time.sleep(0.0002)
    GPIO.output(TRIG_PIN, GPIO.HIGH)
    time.sleep(0.00001)
    GPIO.output(TRIG_PIN, GPIO.LOW)

    # Initialize timing variables
    start_time = time.time()
    stop_time = time.time()

    # Wait for ECHO_PIN to go high
    timeout = time.time() + 0.04  # 40ms timeout
    while GPIO.input(ECHO_PIN) == 0 and time.time() < timeout:
        start_time = time.time()

    # Wait for ECHO_PIN to go low
    timeout = time.time() + 0.04
    while GPIO.input(ECHO_PIN) == 1 and time.time() < timeout:
        stop_time = time.time()

    # Calculate time difference
    time_elapsed = stop_time - start_time

    # Check for timeout
    if time.time() >= timeout:
        return None  # Indicate no valid reading

    # Calculate distance (speed of sound is 34300 cm/s)
    distance_cm = (time_elapsed * 34300) / 2
    return distance_cm

def buzzer_on():
    GPIO.output(BUZZER_PIN, GPIO.HIGH)

def buzzer_off():
    GPIO.output(BUZZER_PIN, GPIO.LOW)

def beep(duration):
    buzzer_on()
    time.sleep(duration)
    buzzer_off()
    time.sleep(duration)

def loop():
    while True:
        dis = distance()
        if dis is None:
            print("Out of range")
            buzzer_off()
        else:
            print(f"Distance: {dis:.2f} cm")
            if dis < 5:
                buzzer_on()
            elif dis < 100:
                # Calculate beep interval based on distance
                beep_interval = max((dis - 5) / 200.0, 0.05)
                beep(beep_interval)
            else:
                buzzer_off()
        time.sleep(0.1)

def destroy():
    buzzer_off()
    GPIO.cleanup()

if __name__ == "__main__":
    try:
        setup()
        loop()
    except KeyboardInterrupt:
        destroy()
        print("Program terminated and GPIO cleaned up.")

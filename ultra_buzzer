#!/usr/bin/env python3

import RPi.GPIO as GPIO
import time

# Define GPIO pins using BCM numbering
TRIG = 17         # GPIO17
ECHO = 18         # GPIO18
BuzzerPin = 27    # GPIO27 (You can change this to any available GPIO pin connected to your buzzer)

def setup():
    GPIO.setwarnings(False)  # Disable warnings if GPIO was not properly cleaned up before
    GPIO.setmode(GPIO.BCM)
    # Setup for ultrasonic sensor
    GPIO.setup(TRIG, GPIO.OUT)
    GPIO.setup(ECHO, GPIO.IN)

    # Setup for buzzer
    GPIO.setup(BuzzerPin, GPIO.OUT)
    GPIO.output(BuzzerPin, GPIO.HIGH)  # Ensure buzzer is off initially

def distance():
    # Ensure the TRIG pin is set low
    GPIO.output(TRIG, False)
    time.sleep(0.0002)

    # Send a 10us pulse to TRIG
    GPIO.output(TRIG, True)
    time.sleep(0.00001)
    GPIO.output(TRIG, False)

    # Initialize variables
    StartTime = time.time()
    StopTime = time.time()

    # Save StartTime
    timeout = StartTime + 0.04  # 40ms timeout
    while GPIO.input(ECHO) == 0 and StartTime < timeout:
        StartTime = time.time()

    # Save time of arrival
    timeout = StartTime + 0.04
    while GPIO.input(ECHO) == 1 and StopTime < timeout:
        StopTime = time.time()

    # Time difference between start and arrival
    TimeElapsed = StopTime - StartTime

    # If the sensor timed out, return a large distance
    if TimeElapsed >= 0.04:
        return 1000  # Arbitrary large distance in cm

    # Calculate distance
    distance_cm = (TimeElapsed * 34300) / 2
    return distance_cm

def buzzer_on():
    GPIO.output(BuzzerPin, GPIO.LOW)

def buzzer_off():
    GPIO.output(BuzzerPin, GPIO.HIGH)

def beep(duration):
    buzzer_on()
    time.sleep(duration)
    buzzer_off()
    time.sleep(duration)

def loop():
    while True:
        dis = distance()
        print(f"Distance: {dis:.2f} cm")
        # Buzzer logic
        if dis < 5:
            buzzer_on()
        elif dis < 100:
            # Decrease beep interval as object gets closer
            beep_interval = (dis - 5) / 200.0  # Adjust scaling as needed
            if beep_interval < 0.05:
                beep_interval = 0.05  # Minimum beep interval
            beep(beep_interval)
        else:
            buzzer_off()
        time.sleep(0.1)

def destroy():
    buzzer_off()
    GPIO.cleanup()

if __name__ == "__main__":
    setup()
    try:
        loop()
    except KeyboardInterrupt:
        destroy()
        print('GPIO cleaned up and program terminated.')
